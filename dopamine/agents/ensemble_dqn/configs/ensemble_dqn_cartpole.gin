# Hyperparameters for a simple DQN-style Cartpole agent. The hyperparameters
# chosen achieve reasonable performance.
import dopamine.discrete_domains.gym_lib
import dopamine.discrete_domains.run_experiment
import dopamine.agents.dqn.dqn_agent
import dopamine.replay_memory.circular_replay_buffer
import gin.tf.external_configurables

EnsembleDQNAgent.observation_shape = %gym_lib.CARTPOLE_OBSERVATION_SHAPE
EnsembleDQNAgent.observation_dtype = %gym_lib.CARTPOLE_OBSERVATION_DTYPE
EnsembleDQNAgent.stack_size = %gym_lib.CARTPOLE_STACK_SIZE

EnsembleDQNAgent.representation_network = @gym_lib.IdentityNetwork
EnsembleDQNAgent.head_network = @gym_lib.CartpoleDQNNetwork

EnsembleDQNAgent.gamma = 0.99
EnsembleDQNAgent.update_horizon = 1
EnsembleDQNAgent.min_replay_history = 500
EnsembleDQNAgent.update_period = 4
EnsembleDQNAgent.target_update_period = 100
EnsembleDQNAgent.epsilon_fn = @dqn_agent.identity_epsilon
EnsembleDQNAgent.tf_device = '/gpu:0'  # use '/cpu:*' for non-GPU version
EnsembleDQNAgent.optimizer = @tf.train.AdamOptimizer()

EnsembleDQNAgent.replay_scheme = 'prioritized'
EnsembleDQNAgent.priority_type = 'variance_reduction'
EnsembleDQNAgent.num_ensemble = 10
EnsembleDQNAgent.rew_noise_scale = 0.0

EnsembleDQNAgent.observation_shape = (4,)

tf.train.AdamOptimizer.learning_rate = 0.001
tf.train.AdamOptimizer.epsilon = 0.0003125

create_gym_environment.environment_name = 'CartPole'
create_gym_environment.version = 'v0'
create_agent.agent_name = 'ensemble_dqn'
Runner.create_environment_fn = @gym_lib.create_gym_environment
Runner.num_iterations = 10
Runner.training_steps = 1000
Runner.evaluation_steps = 1000
Runner.max_steps_per_episode = 200  # Default max episode length.

WrappedReplayBuffer.replay_capacity = 50000
WrappedReplayBuffer.batch_size = 128
